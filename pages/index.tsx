import type { NextPage } from 'next'
import Head from 'next/head'

import { useEffect, useState } from 'react'

import { DragDropContext, DropResult } from 'react-beautiful-dnd'

import InputField from '../components/inputfield'
import Todos from '../components/todos'

import { Status, Todo, TodosStatus } from '../models/todo'
import styles from '../styles/Home.module.css'


const Home: NextPage = () => {
  const [name, setName] = useState<string>('')
  const [backlogTodos, setBacklogTodos] = useState<Todo[]>([])
  const [activeTodos, setActiveTodos] = useState<Todo[]>([])
  const [completedTodos, setCompletedTodos] = useState<Todo[]>([])

  useEffect(() => {
    let backlogTodos = window.localStorage.getItem('backlogTodos')
    if (backlogTodos) {
      let parsed = JSON.parse(backlogTodos)
      setBacklogTodos(parsed)
    }
    let activeTodos = window.localStorage.getItem('activeTodos')
    if (activeTodos) {
      let parsed = JSON.parse(activeTodos)
      setActiveTodos(parsed)
    }
    let completedTodos = window.localStorage.getItem('completedTodos')
    if (completedTodos) {
      let parsed = JSON.parse(completedTodos)
      setCompletedTodos(parsed)
    }
  }, [])

  const addNewTodo = (e: React.FormEvent) => {
    e.preventDefault()
    if (name) {
      const newTodo = {
        id: Date.now(),
        name,
        status: Status.Backlog,
      }

      setBacklogTodos([...backlogTodos, newTodo])

      setName('')
    }
  }

  const onDragEndHandler = (result: DropResult) => {
    const { destination, source } = result

    if (!destination || (destination.droppableId === source.droppableId
      && destination.index === source.index)) return

    let add,
      backlog = backlogTodos,
      active = activeTodos,
      complete = completedTodos

    switch (source.droppableId) {
      case TodosStatus.BacklogTodos:
        add = backlogTodos[source.index]
        backlog.splice(source.index, 1)
        break
      case TodosStatus.ActiveTodos:
        add = active[source.index]
        active.splice(source.index, 1)
        break
      case TodosStatus.CompletedTodos:
        add = complete[source.index]
        complete.splice(source.index, 1)
        break
    }

    if (add) {
      switch (destination.droppableId) {
        case TodosStatus.BacklogTodos:
          backlog.splice(destination.index, 0, add)
          break
        case TodosStatus.ActiveTodos:
          active.splice(destination.index, 0, add)
          break
        case TodosStatus.CompletedTodos:
          complete.splice(destination.index, 0, add)
          break
      }
    }

    setBacklogTodos(backlog)
    setActiveTodos(active)
    setCompletedTodos(complete)

    if (window) {
      window.localStorage.setItem('backlogTodos', JSON.stringify(backlog))
      window.localStorage.setItem('activeTodos', JSON.stringify(active))
      window.localStorage.setItem('completedTodos', JSON.stringify(complete))
    }
  }


  return (
    <DragDropContext onDragEnd={onDragEndHandler}>
      <div className={styles.container}>
        <Head>
          <title>Drag-Drop-Animated-Todo</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className='flex flex-col items-center  min-h-screen pt-10'>
          <h2 className='text-4xl font-bold'>Taskify</h2>

          <InputField
            name={name}
            setName={setName}
            addNewTodo={addNewTodo}
          />
          <Todos
            backlogTodos={backlogTodos}
            setBacklogTodos={setBacklogTodos}
            activeTodos={activeTodos}
            setActiveTodos={setActiveTodos}
            completedTodos={completedTodos}
            setCompletedTodos={setCompletedTodos}
          />
        </div>
      </div>
    </DragDropContext>
  )
}

Home.getInitialProps = async ({ req }) => {
  console.log('req, ')
  return {};
}

export default Home




